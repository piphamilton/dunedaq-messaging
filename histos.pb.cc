// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: histos.proto

#include "histos.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_histo_1D_histos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_histos_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_histo_2D_histos_2eproto;
namespace histos {
class histo_1DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<histo_1D> _instance;
} _histo_1D_default_instance_;
class histo_2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<histo_2D> _instance;
} _histo_2D_default_instance_;
class hist_collectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hist_collection> _instance;
} _hist_collection_default_instance_;
}  // namespace histos
static void InitDefaultsscc_info_hist_collection_histos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::histos::_hist_collection_default_instance_;
    new (ptr) ::histos::hist_collection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_hist_collection_histos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_hist_collection_histos_2eproto}, {
      &scc_info_histo_1D_histos_2eproto.base,
      &scc_info_histo_2D_histos_2eproto.base,}};

static void InitDefaultsscc_info_histo_1D_histos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::histos::_histo_1D_default_instance_;
    new (ptr) ::histos::histo_1D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_histo_1D_histos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_histo_1D_histos_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_histo_2D_histos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::histos::_histo_2D_default_instance_;
    new (ptr) ::histos::histo_2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_histo_2D_histos_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_histo_2D_histos_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_histos_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_histos_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_histos_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_histos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::histos::histo_1D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::histos::histo_1D, hist_title_),
  PROTOBUF_FIELD_OFFSET(::histos::histo_1D, yaxis_title_),
  PROTOBUF_FIELD_OFFSET(::histos::histo_1D, xaxis_title_),
  PROTOBUF_FIELD_OFFSET(::histos::histo_1D, bins_),
  PROTOBUF_FIELD_OFFSET(::histos::histo_1D, bin_contents_),
  PROTOBUF_FIELD_OFFSET(::histos::histo_1D, last_updated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::histos::histo_2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::histos::histo_2D, hist_title_),
  PROTOBUF_FIELD_OFFSET(::histos::histo_2D, yaxis_title_),
  PROTOBUF_FIELD_OFFSET(::histos::histo_2D, xaxis_title_),
  PROTOBUF_FIELD_OFFSET(::histos::histo_2D, xbins_),
  PROTOBUF_FIELD_OFFSET(::histos::histo_2D, ybins_),
  PROTOBUF_FIELD_OFFSET(::histos::histo_2D, bin_contents_),
  PROTOBUF_FIELD_OFFSET(::histos::histo_2D, last_updated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::histos::hist_collection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::histos::hist_collection, histos_1d_),
  PROTOBUF_FIELD_OFFSET(::histos::hist_collection, histos_2d_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::histos::histo_1D)},
  { 11, -1, sizeof(::histos::histo_2D)},
  { 23, -1, sizeof(::histos::hist_collection)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::histos::_histo_1D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::histos::_histo_2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::histos::_hist_collection_default_instance_),
};

const char descriptor_table_protodef_histos_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014histos.proto\022\006histos\032\037google/protobuf/"
  "timestamp.proto\"\236\001\n\010histo_1D\022\022\n\nhist_tit"
  "le\030\001 \001(\t\022\023\n\013yaxis_title\030\002 \001(\t\022\023\n\013xaxis_t"
  "itle\030\003 \001(\t\022\014\n\004bins\030\004 \003(\t\022\024\n\014bin_contents"
  "\030\005 \003(\002\0220\n\014last_updated\030\006 \001(\0132\032.google.pr"
  "otobuf.Timestamp\"\256\001\n\010histo_2D\022\022\n\nhist_ti"
  "tle\030\001 \001(\t\022\023\n\013yaxis_title\030\002 \001(\t\022\023\n\013xaxis_"
  "title\030\003 \001(\t\022\r\n\005xbins\030\004 \003(\t\022\r\n\005ybins\030\005 \003("
  "\t\022\024\n\014bin_contents\030\006 \003(\002\0220\n\014last_updated\030"
  "\007 \001(\0132\032.google.protobuf.Timestamp\"[\n\017his"
  "t_collection\022#\n\thistos_1D\030\001 \003(\0132\020.histos"
  ".histo_1D\022#\n\thistos_2D\030\002 \003(\0132\020.histos.hi"
  "sto_2Db\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_histos_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_histos_2eproto_sccs[3] = {
  &scc_info_hist_collection_histos_2eproto.base,
  &scc_info_histo_1D_histos_2eproto.base,
  &scc_info_histo_2D_histos_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_histos_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_histos_2eproto = {
  false, false, descriptor_table_protodef_histos_2eproto, "histos.proto", 494,
  &descriptor_table_histos_2eproto_once, descriptor_table_histos_2eproto_sccs, descriptor_table_histos_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_histos_2eproto::offsets,
  file_level_metadata_histos_2eproto, 3, file_level_enum_descriptors_histos_2eproto, file_level_service_descriptors_histos_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_histos_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_histos_2eproto)), true);
namespace histos {

// ===================================================================

class histo_1D::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const histo_1D* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
histo_1D::_Internal::last_updated(const histo_1D* msg) {
  return *msg->last_updated_;
}
void histo_1D::clear_last_updated() {
  if (GetArena() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
}
histo_1D::histo_1D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bins_(arena),
  bin_contents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:histos.histo_1D)
}
histo_1D::histo_1D(const histo_1D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bins_(from.bins_),
      bin_contents_(from.bin_contents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hist_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hist_title().empty()) {
    hist_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hist_title(), 
      GetArena());
  }
  yaxis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_yaxis_title().empty()) {
    yaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_yaxis_title(), 
      GetArena());
  }
  xaxis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_xaxis_title().empty()) {
    xaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_xaxis_title(), 
      GetArena());
  }
  if (from._internal_has_last_updated()) {
    last_updated_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_updated_);
  } else {
    last_updated_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:histos.histo_1D)
}

void histo_1D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_histo_1D_histos_2eproto.base);
  hist_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  yaxis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xaxis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_updated_ = nullptr;
}

histo_1D::~histo_1D() {
  // @@protoc_insertion_point(destructor:histos.histo_1D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void histo_1D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hist_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  yaxis_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xaxis_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_updated_;
}

void histo_1D::ArenaDtor(void* object) {
  histo_1D* _this = reinterpret_cast< histo_1D* >(object);
  (void)_this;
}
void histo_1D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void histo_1D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const histo_1D& histo_1D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_histo_1D_histos_2eproto.base);
  return *internal_default_instance();
}


void histo_1D::Clear() {
// @@protoc_insertion_point(message_clear_start:histos.histo_1D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bins_.Clear();
  bin_contents_.Clear();
  hist_title_.ClearToEmpty();
  yaxis_title_.ClearToEmpty();
  xaxis_title_.ClearToEmpty();
  if (GetArena() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* histo_1D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hist_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hist_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "histos.histo_1D.hist_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string yaxis_title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_yaxis_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "histos.histo_1D.yaxis_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string xaxis_title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_xaxis_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "histos.histo_1D.xaxis_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string bins = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bins();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "histos.histo_1D.bins"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float bin_contents = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bin_contents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_bin_contents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_updated = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* histo_1D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:histos.histo_1D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hist_title = 1;
  if (this->hist_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hist_title().data(), static_cast<int>(this->_internal_hist_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "histos.histo_1D.hist_title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hist_title(), target);
  }

  // string yaxis_title = 2;
  if (this->yaxis_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_yaxis_title().data(), static_cast<int>(this->_internal_yaxis_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "histos.histo_1D.yaxis_title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_yaxis_title(), target);
  }

  // string xaxis_title = 3;
  if (this->xaxis_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xaxis_title().data(), static_cast<int>(this->_internal_xaxis_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "histos.histo_1D.xaxis_title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_xaxis_title(), target);
  }

  // repeated string bins = 4;
  for (int i = 0, n = this->_internal_bins_size(); i < n; i++) {
    const auto& s = this->_internal_bins(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "histos.histo_1D.bins");
    target = stream->WriteString(4, s, target);
  }

  // repeated float bin_contents = 5;
  if (this->_internal_bin_contents_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_bin_contents(), target);
  }

  // .google.protobuf.Timestamp last_updated = 6;
  if (this->has_last_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::last_updated(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:histos.histo_1D)
  return target;
}

size_t histo_1D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:histos.histo_1D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string bins = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bins_.size());
  for (int i = 0, n = bins_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bins_.Get(i));
  }

  // repeated float bin_contents = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bin_contents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bin_contents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string hist_title = 1;
  if (this->hist_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hist_title());
  }

  // string yaxis_title = 2;
  if (this->yaxis_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_yaxis_title());
  }

  // string xaxis_title = 3;
  if (this->xaxis_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xaxis_title());
  }

  // .google.protobuf.Timestamp last_updated = 6;
  if (this->has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void histo_1D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:histos.histo_1D)
  GOOGLE_DCHECK_NE(&from, this);
  const histo_1D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<histo_1D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:histos.histo_1D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:histos.histo_1D)
    MergeFrom(*source);
  }
}

void histo_1D::MergeFrom(const histo_1D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:histos.histo_1D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bins_.MergeFrom(from.bins_);
  bin_contents_.MergeFrom(from.bin_contents_);
  if (from.hist_title().size() > 0) {
    _internal_set_hist_title(from._internal_hist_title());
  }
  if (from.yaxis_title().size() > 0) {
    _internal_set_yaxis_title(from._internal_yaxis_title());
  }
  if (from.xaxis_title().size() > 0) {
    _internal_set_xaxis_title(from._internal_xaxis_title());
  }
  if (from.has_last_updated()) {
    _internal_mutable_last_updated()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_updated());
  }
}

void histo_1D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:histos.histo_1D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void histo_1D::CopyFrom(const histo_1D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:histos.histo_1D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool histo_1D::IsInitialized() const {
  return true;
}

void histo_1D::InternalSwap(histo_1D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bins_.InternalSwap(&other->bins_);
  bin_contents_.InternalSwap(&other->bin_contents_);
  hist_title_.Swap(&other->hist_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  yaxis_title_.Swap(&other->yaxis_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  xaxis_title_.Swap(&other->xaxis_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(last_updated_, other->last_updated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata histo_1D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class histo_2D::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const histo_2D* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
histo_2D::_Internal::last_updated(const histo_2D* msg) {
  return *msg->last_updated_;
}
void histo_2D::clear_last_updated() {
  if (GetArena() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
}
histo_2D::histo_2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  xbins_(arena),
  ybins_(arena),
  bin_contents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:histos.histo_2D)
}
histo_2D::histo_2D(const histo_2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      xbins_(from.xbins_),
      ybins_(from.ybins_),
      bin_contents_(from.bin_contents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hist_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hist_title().empty()) {
    hist_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hist_title(), 
      GetArena());
  }
  yaxis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_yaxis_title().empty()) {
    yaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_yaxis_title(), 
      GetArena());
  }
  xaxis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_xaxis_title().empty()) {
    xaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_xaxis_title(), 
      GetArena());
  }
  if (from._internal_has_last_updated()) {
    last_updated_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_updated_);
  } else {
    last_updated_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:histos.histo_2D)
}

void histo_2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_histo_2D_histos_2eproto.base);
  hist_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  yaxis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xaxis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_updated_ = nullptr;
}

histo_2D::~histo_2D() {
  // @@protoc_insertion_point(destructor:histos.histo_2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void histo_2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hist_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  yaxis_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xaxis_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_updated_;
}

void histo_2D::ArenaDtor(void* object) {
  histo_2D* _this = reinterpret_cast< histo_2D* >(object);
  (void)_this;
}
void histo_2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void histo_2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const histo_2D& histo_2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_histo_2D_histos_2eproto.base);
  return *internal_default_instance();
}


void histo_2D::Clear() {
// @@protoc_insertion_point(message_clear_start:histos.histo_2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xbins_.Clear();
  ybins_.Clear();
  bin_contents_.Clear();
  hist_title_.ClearToEmpty();
  yaxis_title_.ClearToEmpty();
  xaxis_title_.ClearToEmpty();
  if (GetArena() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* histo_2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hist_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hist_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "histos.histo_2D.hist_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string yaxis_title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_yaxis_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "histos.histo_2D.yaxis_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string xaxis_title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_xaxis_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "histos.histo_2D.xaxis_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string xbins = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_xbins();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "histos.histo_2D.xbins"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string ybins = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ybins();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "histos.histo_2D.ybins"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float bin_contents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bin_contents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_bin_contents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_updated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* histo_2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:histos.histo_2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hist_title = 1;
  if (this->hist_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hist_title().data(), static_cast<int>(this->_internal_hist_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "histos.histo_2D.hist_title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hist_title(), target);
  }

  // string yaxis_title = 2;
  if (this->yaxis_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_yaxis_title().data(), static_cast<int>(this->_internal_yaxis_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "histos.histo_2D.yaxis_title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_yaxis_title(), target);
  }

  // string xaxis_title = 3;
  if (this->xaxis_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xaxis_title().data(), static_cast<int>(this->_internal_xaxis_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "histos.histo_2D.xaxis_title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_xaxis_title(), target);
  }

  // repeated string xbins = 4;
  for (int i = 0, n = this->_internal_xbins_size(); i < n; i++) {
    const auto& s = this->_internal_xbins(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "histos.histo_2D.xbins");
    target = stream->WriteString(4, s, target);
  }

  // repeated string ybins = 5;
  for (int i = 0, n = this->_internal_ybins_size(); i < n; i++) {
    const auto& s = this->_internal_ybins(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "histos.histo_2D.ybins");
    target = stream->WriteString(5, s, target);
  }

  // repeated float bin_contents = 6;
  if (this->_internal_bin_contents_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_bin_contents(), target);
  }

  // .google.protobuf.Timestamp last_updated = 7;
  if (this->has_last_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::last_updated(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:histos.histo_2D)
  return target;
}

size_t histo_2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:histos.histo_2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string xbins = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(xbins_.size());
  for (int i = 0, n = xbins_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      xbins_.Get(i));
  }

  // repeated string ybins = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ybins_.size());
  for (int i = 0, n = ybins_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ybins_.Get(i));
  }

  // repeated float bin_contents = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bin_contents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bin_contents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string hist_title = 1;
  if (this->hist_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hist_title());
  }

  // string yaxis_title = 2;
  if (this->yaxis_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_yaxis_title());
  }

  // string xaxis_title = 3;
  if (this->xaxis_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xaxis_title());
  }

  // .google.protobuf.Timestamp last_updated = 7;
  if (this->has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void histo_2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:histos.histo_2D)
  GOOGLE_DCHECK_NE(&from, this);
  const histo_2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<histo_2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:histos.histo_2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:histos.histo_2D)
    MergeFrom(*source);
  }
}

void histo_2D::MergeFrom(const histo_2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:histos.histo_2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xbins_.MergeFrom(from.xbins_);
  ybins_.MergeFrom(from.ybins_);
  bin_contents_.MergeFrom(from.bin_contents_);
  if (from.hist_title().size() > 0) {
    _internal_set_hist_title(from._internal_hist_title());
  }
  if (from.yaxis_title().size() > 0) {
    _internal_set_yaxis_title(from._internal_yaxis_title());
  }
  if (from.xaxis_title().size() > 0) {
    _internal_set_xaxis_title(from._internal_xaxis_title());
  }
  if (from.has_last_updated()) {
    _internal_mutable_last_updated()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_updated());
  }
}

void histo_2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:histos.histo_2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void histo_2D::CopyFrom(const histo_2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:histos.histo_2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool histo_2D::IsInitialized() const {
  return true;
}

void histo_2D::InternalSwap(histo_2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  xbins_.InternalSwap(&other->xbins_);
  ybins_.InternalSwap(&other->ybins_);
  bin_contents_.InternalSwap(&other->bin_contents_);
  hist_title_.Swap(&other->hist_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  yaxis_title_.Swap(&other->yaxis_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  xaxis_title_.Swap(&other->xaxis_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(last_updated_, other->last_updated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata histo_2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class hist_collection::_Internal {
 public:
};

hist_collection::hist_collection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  histos_1d_(arena),
  histos_2d_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:histos.hist_collection)
}
hist_collection::hist_collection(const hist_collection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      histos_1d_(from.histos_1d_),
      histos_2d_(from.histos_2d_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:histos.hist_collection)
}

void hist_collection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_hist_collection_histos_2eproto.base);
}

hist_collection::~hist_collection() {
  // @@protoc_insertion_point(destructor:histos.hist_collection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void hist_collection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void hist_collection::ArenaDtor(void* object) {
  hist_collection* _this = reinterpret_cast< hist_collection* >(object);
  (void)_this;
}
void hist_collection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hist_collection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hist_collection& hist_collection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_hist_collection_histos_2eproto.base);
  return *internal_default_instance();
}


void hist_collection::Clear() {
// @@protoc_insertion_point(message_clear_start:histos.hist_collection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  histos_1d_.Clear();
  histos_2d_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hist_collection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .histos.histo_1D histos_1D = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_histos_1d(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .histos.histo_2D histos_2D = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_histos_2d(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hist_collection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:histos.hist_collection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .histos.histo_1D histos_1D = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_histos_1d_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_histos_1d(i), target, stream);
  }

  // repeated .histos.histo_2D histos_2D = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_histos_2d_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_histos_2d(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:histos.hist_collection)
  return target;
}

size_t hist_collection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:histos.hist_collection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .histos.histo_1D histos_1D = 1;
  total_size += 1UL * this->_internal_histos_1d_size();
  for (const auto& msg : this->histos_1d_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .histos.histo_2D histos_2D = 2;
  total_size += 1UL * this->_internal_histos_2d_size();
  for (const auto& msg : this->histos_2d_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hist_collection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:histos.hist_collection)
  GOOGLE_DCHECK_NE(&from, this);
  const hist_collection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<hist_collection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:histos.hist_collection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:histos.hist_collection)
    MergeFrom(*source);
  }
}

void hist_collection::MergeFrom(const hist_collection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:histos.hist_collection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  histos_1d_.MergeFrom(from.histos_1d_);
  histos_2d_.MergeFrom(from.histos_2d_);
}

void hist_collection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:histos.hist_collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hist_collection::CopyFrom(const hist_collection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:histos.hist_collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hist_collection::IsInitialized() const {
  return true;
}

void hist_collection::InternalSwap(hist_collection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  histos_1d_.InternalSwap(&other->histos_1d_);
  histos_2d_.InternalSwap(&other->histos_2d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata hist_collection::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace histos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::histos::histo_1D* Arena::CreateMaybeMessage< ::histos::histo_1D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::histos::histo_1D >(arena);
}
template<> PROTOBUF_NOINLINE ::histos::histo_2D* Arena::CreateMaybeMessage< ::histos::histo_2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::histos::histo_2D >(arena);
}
template<> PROTOBUF_NOINLINE ::histos::hist_collection* Arena::CreateMaybeMessage< ::histos::hist_collection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::histos::hist_collection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
