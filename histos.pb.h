// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: histos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_histos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_histos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_histos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_histos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_histos_2eproto;
namespace histos {
class hist_collection;
class hist_collectionDefaultTypeInternal;
extern hist_collectionDefaultTypeInternal _hist_collection_default_instance_;
class histo_1D;
class histo_1DDefaultTypeInternal;
extern histo_1DDefaultTypeInternal _histo_1D_default_instance_;
class histo_2D;
class histo_2DDefaultTypeInternal;
extern histo_2DDefaultTypeInternal _histo_2D_default_instance_;
}  // namespace histos
PROTOBUF_NAMESPACE_OPEN
template<> ::histos::hist_collection* Arena::CreateMaybeMessage<::histos::hist_collection>(Arena*);
template<> ::histos::histo_1D* Arena::CreateMaybeMessage<::histos::histo_1D>(Arena*);
template<> ::histos::histo_2D* Arena::CreateMaybeMessage<::histos::histo_2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace histos {

// ===================================================================

class histo_1D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:histos.histo_1D) */ {
 public:
  inline histo_1D() : histo_1D(nullptr) {}
  virtual ~histo_1D();

  histo_1D(const histo_1D& from);
  histo_1D(histo_1D&& from) noexcept
    : histo_1D() {
    *this = ::std::move(from);
  }

  inline histo_1D& operator=(const histo_1D& from) {
    CopyFrom(from);
    return *this;
  }
  inline histo_1D& operator=(histo_1D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const histo_1D& default_instance();

  static inline const histo_1D* internal_default_instance() {
    return reinterpret_cast<const histo_1D*>(
               &_histo_1D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(histo_1D& a, histo_1D& b) {
    a.Swap(&b);
  }
  inline void Swap(histo_1D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(histo_1D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline histo_1D* New() const final {
    return CreateMaybeMessage<histo_1D>(nullptr);
  }

  histo_1D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<histo_1D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const histo_1D& from);
  void MergeFrom(const histo_1D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(histo_1D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "histos.histo_1D";
  }
  protected:
  explicit histo_1D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_histos_2eproto);
    return ::descriptor_table_histos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinsFieldNumber = 4,
    kBinContentsFieldNumber = 5,
    kHistTitleFieldNumber = 1,
    kYaxisTitleFieldNumber = 2,
    kXaxisTitleFieldNumber = 3,
    kLastUpdatedFieldNumber = 6,
  };
  // repeated string bins = 4;
  int bins_size() const;
  private:
  int _internal_bins_size() const;
  public:
  void clear_bins();
  const std::string& bins(int index) const;
  std::string* mutable_bins(int index);
  void set_bins(int index, const std::string& value);
  void set_bins(int index, std::string&& value);
  void set_bins(int index, const char* value);
  void set_bins(int index, const char* value, size_t size);
  std::string* add_bins();
  void add_bins(const std::string& value);
  void add_bins(std::string&& value);
  void add_bins(const char* value);
  void add_bins(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bins();
  private:
  const std::string& _internal_bins(int index) const;
  std::string* _internal_add_bins();
  public:

  // repeated float bin_contents = 5;
  int bin_contents_size() const;
  private:
  int _internal_bin_contents_size() const;
  public:
  void clear_bin_contents();
  private:
  float _internal_bin_contents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bin_contents() const;
  void _internal_add_bin_contents(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bin_contents();
  public:
  float bin_contents(int index) const;
  void set_bin_contents(int index, float value);
  void add_bin_contents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bin_contents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bin_contents();

  // string hist_title = 1;
  void clear_hist_title();
  const std::string& hist_title() const;
  void set_hist_title(const std::string& value);
  void set_hist_title(std::string&& value);
  void set_hist_title(const char* value);
  void set_hist_title(const char* value, size_t size);
  std::string* mutable_hist_title();
  std::string* release_hist_title();
  void set_allocated_hist_title(std::string* hist_title);
  private:
  const std::string& _internal_hist_title() const;
  void _internal_set_hist_title(const std::string& value);
  std::string* _internal_mutable_hist_title();
  public:

  // string yaxis_title = 2;
  void clear_yaxis_title();
  const std::string& yaxis_title() const;
  void set_yaxis_title(const std::string& value);
  void set_yaxis_title(std::string&& value);
  void set_yaxis_title(const char* value);
  void set_yaxis_title(const char* value, size_t size);
  std::string* mutable_yaxis_title();
  std::string* release_yaxis_title();
  void set_allocated_yaxis_title(std::string* yaxis_title);
  private:
  const std::string& _internal_yaxis_title() const;
  void _internal_set_yaxis_title(const std::string& value);
  std::string* _internal_mutable_yaxis_title();
  public:

  // string xaxis_title = 3;
  void clear_xaxis_title();
  const std::string& xaxis_title() const;
  void set_xaxis_title(const std::string& value);
  void set_xaxis_title(std::string&& value);
  void set_xaxis_title(const char* value);
  void set_xaxis_title(const char* value, size_t size);
  std::string* mutable_xaxis_title();
  std::string* release_xaxis_title();
  void set_allocated_xaxis_title(std::string* xaxis_title);
  private:
  const std::string& _internal_xaxis_title() const;
  void _internal_set_xaxis_title(const std::string& value);
  std::string* _internal_mutable_xaxis_title();
  public:

  // .google.protobuf.Timestamp last_updated = 6;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated();
  public:
  void unsafe_arena_set_allocated_last_updated(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_updated();

  // @@protoc_insertion_point(class_scope:histos.histo_1D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bins_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bin_contents_;
  mutable std::atomic<int> _bin_contents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hist_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr yaxis_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xaxis_title_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_histos_2eproto;
};
// -------------------------------------------------------------------

class histo_2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:histos.histo_2D) */ {
 public:
  inline histo_2D() : histo_2D(nullptr) {}
  virtual ~histo_2D();

  histo_2D(const histo_2D& from);
  histo_2D(histo_2D&& from) noexcept
    : histo_2D() {
    *this = ::std::move(from);
  }

  inline histo_2D& operator=(const histo_2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline histo_2D& operator=(histo_2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const histo_2D& default_instance();

  static inline const histo_2D* internal_default_instance() {
    return reinterpret_cast<const histo_2D*>(
               &_histo_2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(histo_2D& a, histo_2D& b) {
    a.Swap(&b);
  }
  inline void Swap(histo_2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(histo_2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline histo_2D* New() const final {
    return CreateMaybeMessage<histo_2D>(nullptr);
  }

  histo_2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<histo_2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const histo_2D& from);
  void MergeFrom(const histo_2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(histo_2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "histos.histo_2D";
  }
  protected:
  explicit histo_2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_histos_2eproto);
    return ::descriptor_table_histos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXbinsFieldNumber = 4,
    kYbinsFieldNumber = 5,
    kBinContentsFieldNumber = 6,
    kHistTitleFieldNumber = 1,
    kYaxisTitleFieldNumber = 2,
    kXaxisTitleFieldNumber = 3,
    kLastUpdatedFieldNumber = 7,
  };
  // repeated string xbins = 4;
  int xbins_size() const;
  private:
  int _internal_xbins_size() const;
  public:
  void clear_xbins();
  const std::string& xbins(int index) const;
  std::string* mutable_xbins(int index);
  void set_xbins(int index, const std::string& value);
  void set_xbins(int index, std::string&& value);
  void set_xbins(int index, const char* value);
  void set_xbins(int index, const char* value, size_t size);
  std::string* add_xbins();
  void add_xbins(const std::string& value);
  void add_xbins(std::string&& value);
  void add_xbins(const char* value);
  void add_xbins(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& xbins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_xbins();
  private:
  const std::string& _internal_xbins(int index) const;
  std::string* _internal_add_xbins();
  public:

  // repeated string ybins = 5;
  int ybins_size() const;
  private:
  int _internal_ybins_size() const;
  public:
  void clear_ybins();
  const std::string& ybins(int index) const;
  std::string* mutable_ybins(int index);
  void set_ybins(int index, const std::string& value);
  void set_ybins(int index, std::string&& value);
  void set_ybins(int index, const char* value);
  void set_ybins(int index, const char* value, size_t size);
  std::string* add_ybins();
  void add_ybins(const std::string& value);
  void add_ybins(std::string&& value);
  void add_ybins(const char* value);
  void add_ybins(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ybins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ybins();
  private:
  const std::string& _internal_ybins(int index) const;
  std::string* _internal_add_ybins();
  public:

  // repeated float bin_contents = 6;
  int bin_contents_size() const;
  private:
  int _internal_bin_contents_size() const;
  public:
  void clear_bin_contents();
  private:
  float _internal_bin_contents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bin_contents() const;
  void _internal_add_bin_contents(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bin_contents();
  public:
  float bin_contents(int index) const;
  void set_bin_contents(int index, float value);
  void add_bin_contents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bin_contents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bin_contents();

  // string hist_title = 1;
  void clear_hist_title();
  const std::string& hist_title() const;
  void set_hist_title(const std::string& value);
  void set_hist_title(std::string&& value);
  void set_hist_title(const char* value);
  void set_hist_title(const char* value, size_t size);
  std::string* mutable_hist_title();
  std::string* release_hist_title();
  void set_allocated_hist_title(std::string* hist_title);
  private:
  const std::string& _internal_hist_title() const;
  void _internal_set_hist_title(const std::string& value);
  std::string* _internal_mutable_hist_title();
  public:

  // string yaxis_title = 2;
  void clear_yaxis_title();
  const std::string& yaxis_title() const;
  void set_yaxis_title(const std::string& value);
  void set_yaxis_title(std::string&& value);
  void set_yaxis_title(const char* value);
  void set_yaxis_title(const char* value, size_t size);
  std::string* mutable_yaxis_title();
  std::string* release_yaxis_title();
  void set_allocated_yaxis_title(std::string* yaxis_title);
  private:
  const std::string& _internal_yaxis_title() const;
  void _internal_set_yaxis_title(const std::string& value);
  std::string* _internal_mutable_yaxis_title();
  public:

  // string xaxis_title = 3;
  void clear_xaxis_title();
  const std::string& xaxis_title() const;
  void set_xaxis_title(const std::string& value);
  void set_xaxis_title(std::string&& value);
  void set_xaxis_title(const char* value);
  void set_xaxis_title(const char* value, size_t size);
  std::string* mutable_xaxis_title();
  std::string* release_xaxis_title();
  void set_allocated_xaxis_title(std::string* xaxis_title);
  private:
  const std::string& _internal_xaxis_title() const;
  void _internal_set_xaxis_title(const std::string& value);
  std::string* _internal_mutable_xaxis_title();
  public:

  // .google.protobuf.Timestamp last_updated = 7;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated();
  public:
  void unsafe_arena_set_allocated_last_updated(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_updated();

  // @@protoc_insertion_point(class_scope:histos.histo_2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> xbins_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ybins_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bin_contents_;
  mutable std::atomic<int> _bin_contents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hist_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr yaxis_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xaxis_title_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_histos_2eproto;
};
// -------------------------------------------------------------------

class hist_collection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:histos.hist_collection) */ {
 public:
  inline hist_collection() : hist_collection(nullptr) {}
  virtual ~hist_collection();

  hist_collection(const hist_collection& from);
  hist_collection(hist_collection&& from) noexcept
    : hist_collection() {
    *this = ::std::move(from);
  }

  inline hist_collection& operator=(const hist_collection& from) {
    CopyFrom(from);
    return *this;
  }
  inline hist_collection& operator=(hist_collection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const hist_collection& default_instance();

  static inline const hist_collection* internal_default_instance() {
    return reinterpret_cast<const hist_collection*>(
               &_hist_collection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(hist_collection& a, hist_collection& b) {
    a.Swap(&b);
  }
  inline void Swap(hist_collection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hist_collection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline hist_collection* New() const final {
    return CreateMaybeMessage<hist_collection>(nullptr);
  }

  hist_collection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<hist_collection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const hist_collection& from);
  void MergeFrom(const hist_collection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hist_collection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "histos.hist_collection";
  }
  protected:
  explicit hist_collection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_histos_2eproto);
    return ::descriptor_table_histos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistos1DFieldNumber = 1,
    kHistos2DFieldNumber = 2,
  };
  // repeated .histos.histo_1D histos_1D = 1;
  int histos_1d_size() const;
  private:
  int _internal_histos_1d_size() const;
  public:
  void clear_histos_1d();
  ::histos::histo_1D* mutable_histos_1d(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::histos::histo_1D >*
      mutable_histos_1d();
  private:
  const ::histos::histo_1D& _internal_histos_1d(int index) const;
  ::histos::histo_1D* _internal_add_histos_1d();
  public:
  const ::histos::histo_1D& histos_1d(int index) const;
  ::histos::histo_1D* add_histos_1d();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::histos::histo_1D >&
      histos_1d() const;

  // repeated .histos.histo_2D histos_2D = 2;
  int histos_2d_size() const;
  private:
  int _internal_histos_2d_size() const;
  public:
  void clear_histos_2d();
  ::histos::histo_2D* mutable_histos_2d(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::histos::histo_2D >*
      mutable_histos_2d();
  private:
  const ::histos::histo_2D& _internal_histos_2d(int index) const;
  ::histos::histo_2D* _internal_add_histos_2d();
  public:
  const ::histos::histo_2D& histos_2d(int index) const;
  ::histos::histo_2D* add_histos_2d();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::histos::histo_2D >&
      histos_2d() const;

  // @@protoc_insertion_point(class_scope:histos.hist_collection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::histos::histo_1D > histos_1d_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::histos::histo_2D > histos_2d_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_histos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// histo_1D

// string hist_title = 1;
inline void histo_1D::clear_hist_title() {
  hist_title_.ClearToEmpty();
}
inline const std::string& histo_1D::hist_title() const {
  // @@protoc_insertion_point(field_get:histos.histo_1D.hist_title)
  return _internal_hist_title();
}
inline void histo_1D::set_hist_title(const std::string& value) {
  _internal_set_hist_title(value);
  // @@protoc_insertion_point(field_set:histos.histo_1D.hist_title)
}
inline std::string* histo_1D::mutable_hist_title() {
  // @@protoc_insertion_point(field_mutable:histos.histo_1D.hist_title)
  return _internal_mutable_hist_title();
}
inline const std::string& histo_1D::_internal_hist_title() const {
  return hist_title_.Get();
}
inline void histo_1D::_internal_set_hist_title(const std::string& value) {
  
  hist_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void histo_1D::set_hist_title(std::string&& value) {
  
  hist_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:histos.histo_1D.hist_title)
}
inline void histo_1D::set_hist_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hist_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:histos.histo_1D.hist_title)
}
inline void histo_1D::set_hist_title(const char* value,
    size_t size) {
  
  hist_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:histos.histo_1D.hist_title)
}
inline std::string* histo_1D::_internal_mutable_hist_title() {
  
  return hist_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* histo_1D::release_hist_title() {
  // @@protoc_insertion_point(field_release:histos.histo_1D.hist_title)
  return hist_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void histo_1D::set_allocated_hist_title(std::string* hist_title) {
  if (hist_title != nullptr) {
    
  } else {
    
  }
  hist_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hist_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:histos.histo_1D.hist_title)
}

// string yaxis_title = 2;
inline void histo_1D::clear_yaxis_title() {
  yaxis_title_.ClearToEmpty();
}
inline const std::string& histo_1D::yaxis_title() const {
  // @@protoc_insertion_point(field_get:histos.histo_1D.yaxis_title)
  return _internal_yaxis_title();
}
inline void histo_1D::set_yaxis_title(const std::string& value) {
  _internal_set_yaxis_title(value);
  // @@protoc_insertion_point(field_set:histos.histo_1D.yaxis_title)
}
inline std::string* histo_1D::mutable_yaxis_title() {
  // @@protoc_insertion_point(field_mutable:histos.histo_1D.yaxis_title)
  return _internal_mutable_yaxis_title();
}
inline const std::string& histo_1D::_internal_yaxis_title() const {
  return yaxis_title_.Get();
}
inline void histo_1D::_internal_set_yaxis_title(const std::string& value) {
  
  yaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void histo_1D::set_yaxis_title(std::string&& value) {
  
  yaxis_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:histos.histo_1D.yaxis_title)
}
inline void histo_1D::set_yaxis_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  yaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:histos.histo_1D.yaxis_title)
}
inline void histo_1D::set_yaxis_title(const char* value,
    size_t size) {
  
  yaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:histos.histo_1D.yaxis_title)
}
inline std::string* histo_1D::_internal_mutable_yaxis_title() {
  
  return yaxis_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* histo_1D::release_yaxis_title() {
  // @@protoc_insertion_point(field_release:histos.histo_1D.yaxis_title)
  return yaxis_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void histo_1D::set_allocated_yaxis_title(std::string* yaxis_title) {
  if (yaxis_title != nullptr) {
    
  } else {
    
  }
  yaxis_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), yaxis_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:histos.histo_1D.yaxis_title)
}

// string xaxis_title = 3;
inline void histo_1D::clear_xaxis_title() {
  xaxis_title_.ClearToEmpty();
}
inline const std::string& histo_1D::xaxis_title() const {
  // @@protoc_insertion_point(field_get:histos.histo_1D.xaxis_title)
  return _internal_xaxis_title();
}
inline void histo_1D::set_xaxis_title(const std::string& value) {
  _internal_set_xaxis_title(value);
  // @@protoc_insertion_point(field_set:histos.histo_1D.xaxis_title)
}
inline std::string* histo_1D::mutable_xaxis_title() {
  // @@protoc_insertion_point(field_mutable:histos.histo_1D.xaxis_title)
  return _internal_mutable_xaxis_title();
}
inline const std::string& histo_1D::_internal_xaxis_title() const {
  return xaxis_title_.Get();
}
inline void histo_1D::_internal_set_xaxis_title(const std::string& value) {
  
  xaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void histo_1D::set_xaxis_title(std::string&& value) {
  
  xaxis_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:histos.histo_1D.xaxis_title)
}
inline void histo_1D::set_xaxis_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:histos.histo_1D.xaxis_title)
}
inline void histo_1D::set_xaxis_title(const char* value,
    size_t size) {
  
  xaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:histos.histo_1D.xaxis_title)
}
inline std::string* histo_1D::_internal_mutable_xaxis_title() {
  
  return xaxis_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* histo_1D::release_xaxis_title() {
  // @@protoc_insertion_point(field_release:histos.histo_1D.xaxis_title)
  return xaxis_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void histo_1D::set_allocated_xaxis_title(std::string* xaxis_title) {
  if (xaxis_title != nullptr) {
    
  } else {
    
  }
  xaxis_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xaxis_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:histos.histo_1D.xaxis_title)
}

// repeated string bins = 4;
inline int histo_1D::_internal_bins_size() const {
  return bins_.size();
}
inline int histo_1D::bins_size() const {
  return _internal_bins_size();
}
inline void histo_1D::clear_bins() {
  bins_.Clear();
}
inline std::string* histo_1D::add_bins() {
  // @@protoc_insertion_point(field_add_mutable:histos.histo_1D.bins)
  return _internal_add_bins();
}
inline const std::string& histo_1D::_internal_bins(int index) const {
  return bins_.Get(index);
}
inline const std::string& histo_1D::bins(int index) const {
  // @@protoc_insertion_point(field_get:histos.histo_1D.bins)
  return _internal_bins(index);
}
inline std::string* histo_1D::mutable_bins(int index) {
  // @@protoc_insertion_point(field_mutable:histos.histo_1D.bins)
  return bins_.Mutable(index);
}
inline void histo_1D::set_bins(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:histos.histo_1D.bins)
  bins_.Mutable(index)->assign(value);
}
inline void histo_1D::set_bins(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:histos.histo_1D.bins)
  bins_.Mutable(index)->assign(std::move(value));
}
inline void histo_1D::set_bins(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:histos.histo_1D.bins)
}
inline void histo_1D::set_bins(int index, const char* value, size_t size) {
  bins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:histos.histo_1D.bins)
}
inline std::string* histo_1D::_internal_add_bins() {
  return bins_.Add();
}
inline void histo_1D::add_bins(const std::string& value) {
  bins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:histos.histo_1D.bins)
}
inline void histo_1D::add_bins(std::string&& value) {
  bins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:histos.histo_1D.bins)
}
inline void histo_1D::add_bins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:histos.histo_1D.bins)
}
inline void histo_1D::add_bins(const char* value, size_t size) {
  bins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:histos.histo_1D.bins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
histo_1D::bins() const {
  // @@protoc_insertion_point(field_list:histos.histo_1D.bins)
  return bins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
histo_1D::mutable_bins() {
  // @@protoc_insertion_point(field_mutable_list:histos.histo_1D.bins)
  return &bins_;
}

// repeated float bin_contents = 5;
inline int histo_1D::_internal_bin_contents_size() const {
  return bin_contents_.size();
}
inline int histo_1D::bin_contents_size() const {
  return _internal_bin_contents_size();
}
inline void histo_1D::clear_bin_contents() {
  bin_contents_.Clear();
}
inline float histo_1D::_internal_bin_contents(int index) const {
  return bin_contents_.Get(index);
}
inline float histo_1D::bin_contents(int index) const {
  // @@protoc_insertion_point(field_get:histos.histo_1D.bin_contents)
  return _internal_bin_contents(index);
}
inline void histo_1D::set_bin_contents(int index, float value) {
  bin_contents_.Set(index, value);
  // @@protoc_insertion_point(field_set:histos.histo_1D.bin_contents)
}
inline void histo_1D::_internal_add_bin_contents(float value) {
  bin_contents_.Add(value);
}
inline void histo_1D::add_bin_contents(float value) {
  _internal_add_bin_contents(value);
  // @@protoc_insertion_point(field_add:histos.histo_1D.bin_contents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
histo_1D::_internal_bin_contents() const {
  return bin_contents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
histo_1D::bin_contents() const {
  // @@protoc_insertion_point(field_list:histos.histo_1D.bin_contents)
  return _internal_bin_contents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
histo_1D::_internal_mutable_bin_contents() {
  return &bin_contents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
histo_1D::mutable_bin_contents() {
  // @@protoc_insertion_point(field_mutable_list:histos.histo_1D.bin_contents)
  return _internal_mutable_bin_contents();
}

// .google.protobuf.Timestamp last_updated = 6;
inline bool histo_1D::_internal_has_last_updated() const {
  return this != internal_default_instance() && last_updated_ != nullptr;
}
inline bool histo_1D::has_last_updated() const {
  return _internal_has_last_updated();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& histo_1D::_internal_last_updated() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_updated_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& histo_1D::last_updated() const {
  // @@protoc_insertion_point(field_get:histos.histo_1D.last_updated)
  return _internal_last_updated();
}
inline void histo_1D::unsafe_arena_set_allocated_last_updated(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  last_updated_ = last_updated;
  if (last_updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:histos.histo_1D.last_updated)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* histo_1D::release_last_updated() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* histo_1D::unsafe_arena_release_last_updated() {
  // @@protoc_insertion_point(field_release:histos.histo_1D.last_updated)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* histo_1D::_internal_mutable_last_updated() {
  
  if (last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    last_updated_ = p;
  }
  return last_updated_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* histo_1D::mutable_last_updated() {
  // @@protoc_insertion_point(field_mutable:histos.histo_1D.last_updated)
  return _internal_mutable_last_updated();
}
inline void histo_1D::set_allocated_last_updated(PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated)->GetArena();
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:histos.histo_1D.last_updated)
}

// -------------------------------------------------------------------

// histo_2D

// string hist_title = 1;
inline void histo_2D::clear_hist_title() {
  hist_title_.ClearToEmpty();
}
inline const std::string& histo_2D::hist_title() const {
  // @@protoc_insertion_point(field_get:histos.histo_2D.hist_title)
  return _internal_hist_title();
}
inline void histo_2D::set_hist_title(const std::string& value) {
  _internal_set_hist_title(value);
  // @@protoc_insertion_point(field_set:histos.histo_2D.hist_title)
}
inline std::string* histo_2D::mutable_hist_title() {
  // @@protoc_insertion_point(field_mutable:histos.histo_2D.hist_title)
  return _internal_mutable_hist_title();
}
inline const std::string& histo_2D::_internal_hist_title() const {
  return hist_title_.Get();
}
inline void histo_2D::_internal_set_hist_title(const std::string& value) {
  
  hist_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void histo_2D::set_hist_title(std::string&& value) {
  
  hist_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:histos.histo_2D.hist_title)
}
inline void histo_2D::set_hist_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hist_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:histos.histo_2D.hist_title)
}
inline void histo_2D::set_hist_title(const char* value,
    size_t size) {
  
  hist_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:histos.histo_2D.hist_title)
}
inline std::string* histo_2D::_internal_mutable_hist_title() {
  
  return hist_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* histo_2D::release_hist_title() {
  // @@protoc_insertion_point(field_release:histos.histo_2D.hist_title)
  return hist_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void histo_2D::set_allocated_hist_title(std::string* hist_title) {
  if (hist_title != nullptr) {
    
  } else {
    
  }
  hist_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hist_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:histos.histo_2D.hist_title)
}

// string yaxis_title = 2;
inline void histo_2D::clear_yaxis_title() {
  yaxis_title_.ClearToEmpty();
}
inline const std::string& histo_2D::yaxis_title() const {
  // @@protoc_insertion_point(field_get:histos.histo_2D.yaxis_title)
  return _internal_yaxis_title();
}
inline void histo_2D::set_yaxis_title(const std::string& value) {
  _internal_set_yaxis_title(value);
  // @@protoc_insertion_point(field_set:histos.histo_2D.yaxis_title)
}
inline std::string* histo_2D::mutable_yaxis_title() {
  // @@protoc_insertion_point(field_mutable:histos.histo_2D.yaxis_title)
  return _internal_mutable_yaxis_title();
}
inline const std::string& histo_2D::_internal_yaxis_title() const {
  return yaxis_title_.Get();
}
inline void histo_2D::_internal_set_yaxis_title(const std::string& value) {
  
  yaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void histo_2D::set_yaxis_title(std::string&& value) {
  
  yaxis_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:histos.histo_2D.yaxis_title)
}
inline void histo_2D::set_yaxis_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  yaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:histos.histo_2D.yaxis_title)
}
inline void histo_2D::set_yaxis_title(const char* value,
    size_t size) {
  
  yaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:histos.histo_2D.yaxis_title)
}
inline std::string* histo_2D::_internal_mutable_yaxis_title() {
  
  return yaxis_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* histo_2D::release_yaxis_title() {
  // @@protoc_insertion_point(field_release:histos.histo_2D.yaxis_title)
  return yaxis_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void histo_2D::set_allocated_yaxis_title(std::string* yaxis_title) {
  if (yaxis_title != nullptr) {
    
  } else {
    
  }
  yaxis_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), yaxis_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:histos.histo_2D.yaxis_title)
}

// string xaxis_title = 3;
inline void histo_2D::clear_xaxis_title() {
  xaxis_title_.ClearToEmpty();
}
inline const std::string& histo_2D::xaxis_title() const {
  // @@protoc_insertion_point(field_get:histos.histo_2D.xaxis_title)
  return _internal_xaxis_title();
}
inline void histo_2D::set_xaxis_title(const std::string& value) {
  _internal_set_xaxis_title(value);
  // @@protoc_insertion_point(field_set:histos.histo_2D.xaxis_title)
}
inline std::string* histo_2D::mutable_xaxis_title() {
  // @@protoc_insertion_point(field_mutable:histos.histo_2D.xaxis_title)
  return _internal_mutable_xaxis_title();
}
inline const std::string& histo_2D::_internal_xaxis_title() const {
  return xaxis_title_.Get();
}
inline void histo_2D::_internal_set_xaxis_title(const std::string& value) {
  
  xaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void histo_2D::set_xaxis_title(std::string&& value) {
  
  xaxis_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:histos.histo_2D.xaxis_title)
}
inline void histo_2D::set_xaxis_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:histos.histo_2D.xaxis_title)
}
inline void histo_2D::set_xaxis_title(const char* value,
    size_t size) {
  
  xaxis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:histos.histo_2D.xaxis_title)
}
inline std::string* histo_2D::_internal_mutable_xaxis_title() {
  
  return xaxis_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* histo_2D::release_xaxis_title() {
  // @@protoc_insertion_point(field_release:histos.histo_2D.xaxis_title)
  return xaxis_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void histo_2D::set_allocated_xaxis_title(std::string* xaxis_title) {
  if (xaxis_title != nullptr) {
    
  } else {
    
  }
  xaxis_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xaxis_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:histos.histo_2D.xaxis_title)
}

// repeated string xbins = 4;
inline int histo_2D::_internal_xbins_size() const {
  return xbins_.size();
}
inline int histo_2D::xbins_size() const {
  return _internal_xbins_size();
}
inline void histo_2D::clear_xbins() {
  xbins_.Clear();
}
inline std::string* histo_2D::add_xbins() {
  // @@protoc_insertion_point(field_add_mutable:histos.histo_2D.xbins)
  return _internal_add_xbins();
}
inline const std::string& histo_2D::_internal_xbins(int index) const {
  return xbins_.Get(index);
}
inline const std::string& histo_2D::xbins(int index) const {
  // @@protoc_insertion_point(field_get:histos.histo_2D.xbins)
  return _internal_xbins(index);
}
inline std::string* histo_2D::mutable_xbins(int index) {
  // @@protoc_insertion_point(field_mutable:histos.histo_2D.xbins)
  return xbins_.Mutable(index);
}
inline void histo_2D::set_xbins(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:histos.histo_2D.xbins)
  xbins_.Mutable(index)->assign(value);
}
inline void histo_2D::set_xbins(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:histos.histo_2D.xbins)
  xbins_.Mutable(index)->assign(std::move(value));
}
inline void histo_2D::set_xbins(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xbins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:histos.histo_2D.xbins)
}
inline void histo_2D::set_xbins(int index, const char* value, size_t size) {
  xbins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:histos.histo_2D.xbins)
}
inline std::string* histo_2D::_internal_add_xbins() {
  return xbins_.Add();
}
inline void histo_2D::add_xbins(const std::string& value) {
  xbins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:histos.histo_2D.xbins)
}
inline void histo_2D::add_xbins(std::string&& value) {
  xbins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:histos.histo_2D.xbins)
}
inline void histo_2D::add_xbins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  xbins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:histos.histo_2D.xbins)
}
inline void histo_2D::add_xbins(const char* value, size_t size) {
  xbins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:histos.histo_2D.xbins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
histo_2D::xbins() const {
  // @@protoc_insertion_point(field_list:histos.histo_2D.xbins)
  return xbins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
histo_2D::mutable_xbins() {
  // @@protoc_insertion_point(field_mutable_list:histos.histo_2D.xbins)
  return &xbins_;
}

// repeated string ybins = 5;
inline int histo_2D::_internal_ybins_size() const {
  return ybins_.size();
}
inline int histo_2D::ybins_size() const {
  return _internal_ybins_size();
}
inline void histo_2D::clear_ybins() {
  ybins_.Clear();
}
inline std::string* histo_2D::add_ybins() {
  // @@protoc_insertion_point(field_add_mutable:histos.histo_2D.ybins)
  return _internal_add_ybins();
}
inline const std::string& histo_2D::_internal_ybins(int index) const {
  return ybins_.Get(index);
}
inline const std::string& histo_2D::ybins(int index) const {
  // @@protoc_insertion_point(field_get:histos.histo_2D.ybins)
  return _internal_ybins(index);
}
inline std::string* histo_2D::mutable_ybins(int index) {
  // @@protoc_insertion_point(field_mutable:histos.histo_2D.ybins)
  return ybins_.Mutable(index);
}
inline void histo_2D::set_ybins(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:histos.histo_2D.ybins)
  ybins_.Mutable(index)->assign(value);
}
inline void histo_2D::set_ybins(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:histos.histo_2D.ybins)
  ybins_.Mutable(index)->assign(std::move(value));
}
inline void histo_2D::set_ybins(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ybins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:histos.histo_2D.ybins)
}
inline void histo_2D::set_ybins(int index, const char* value, size_t size) {
  ybins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:histos.histo_2D.ybins)
}
inline std::string* histo_2D::_internal_add_ybins() {
  return ybins_.Add();
}
inline void histo_2D::add_ybins(const std::string& value) {
  ybins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:histos.histo_2D.ybins)
}
inline void histo_2D::add_ybins(std::string&& value) {
  ybins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:histos.histo_2D.ybins)
}
inline void histo_2D::add_ybins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ybins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:histos.histo_2D.ybins)
}
inline void histo_2D::add_ybins(const char* value, size_t size) {
  ybins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:histos.histo_2D.ybins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
histo_2D::ybins() const {
  // @@protoc_insertion_point(field_list:histos.histo_2D.ybins)
  return ybins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
histo_2D::mutable_ybins() {
  // @@protoc_insertion_point(field_mutable_list:histos.histo_2D.ybins)
  return &ybins_;
}

// repeated float bin_contents = 6;
inline int histo_2D::_internal_bin_contents_size() const {
  return bin_contents_.size();
}
inline int histo_2D::bin_contents_size() const {
  return _internal_bin_contents_size();
}
inline void histo_2D::clear_bin_contents() {
  bin_contents_.Clear();
}
inline float histo_2D::_internal_bin_contents(int index) const {
  return bin_contents_.Get(index);
}
inline float histo_2D::bin_contents(int index) const {
  // @@protoc_insertion_point(field_get:histos.histo_2D.bin_contents)
  return _internal_bin_contents(index);
}
inline void histo_2D::set_bin_contents(int index, float value) {
  bin_contents_.Set(index, value);
  // @@protoc_insertion_point(field_set:histos.histo_2D.bin_contents)
}
inline void histo_2D::_internal_add_bin_contents(float value) {
  bin_contents_.Add(value);
}
inline void histo_2D::add_bin_contents(float value) {
  _internal_add_bin_contents(value);
  // @@protoc_insertion_point(field_add:histos.histo_2D.bin_contents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
histo_2D::_internal_bin_contents() const {
  return bin_contents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
histo_2D::bin_contents() const {
  // @@protoc_insertion_point(field_list:histos.histo_2D.bin_contents)
  return _internal_bin_contents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
histo_2D::_internal_mutable_bin_contents() {
  return &bin_contents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
histo_2D::mutable_bin_contents() {
  // @@protoc_insertion_point(field_mutable_list:histos.histo_2D.bin_contents)
  return _internal_mutable_bin_contents();
}

// .google.protobuf.Timestamp last_updated = 7;
inline bool histo_2D::_internal_has_last_updated() const {
  return this != internal_default_instance() && last_updated_ != nullptr;
}
inline bool histo_2D::has_last_updated() const {
  return _internal_has_last_updated();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& histo_2D::_internal_last_updated() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_updated_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& histo_2D::last_updated() const {
  // @@protoc_insertion_point(field_get:histos.histo_2D.last_updated)
  return _internal_last_updated();
}
inline void histo_2D::unsafe_arena_set_allocated_last_updated(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  last_updated_ = last_updated;
  if (last_updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:histos.histo_2D.last_updated)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* histo_2D::release_last_updated() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* histo_2D::unsafe_arena_release_last_updated() {
  // @@protoc_insertion_point(field_release:histos.histo_2D.last_updated)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* histo_2D::_internal_mutable_last_updated() {
  
  if (last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    last_updated_ = p;
  }
  return last_updated_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* histo_2D::mutable_last_updated() {
  // @@protoc_insertion_point(field_mutable:histos.histo_2D.last_updated)
  return _internal_mutable_last_updated();
}
inline void histo_2D::set_allocated_last_updated(PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated)->GetArena();
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:histos.histo_2D.last_updated)
}

// -------------------------------------------------------------------

// hist_collection

// repeated .histos.histo_1D histos_1D = 1;
inline int hist_collection::_internal_histos_1d_size() const {
  return histos_1d_.size();
}
inline int hist_collection::histos_1d_size() const {
  return _internal_histos_1d_size();
}
inline void hist_collection::clear_histos_1d() {
  histos_1d_.Clear();
}
inline ::histos::histo_1D* hist_collection::mutable_histos_1d(int index) {
  // @@protoc_insertion_point(field_mutable:histos.hist_collection.histos_1D)
  return histos_1d_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::histos::histo_1D >*
hist_collection::mutable_histos_1d() {
  // @@protoc_insertion_point(field_mutable_list:histos.hist_collection.histos_1D)
  return &histos_1d_;
}
inline const ::histos::histo_1D& hist_collection::_internal_histos_1d(int index) const {
  return histos_1d_.Get(index);
}
inline const ::histos::histo_1D& hist_collection::histos_1d(int index) const {
  // @@protoc_insertion_point(field_get:histos.hist_collection.histos_1D)
  return _internal_histos_1d(index);
}
inline ::histos::histo_1D* hist_collection::_internal_add_histos_1d() {
  return histos_1d_.Add();
}
inline ::histos::histo_1D* hist_collection::add_histos_1d() {
  // @@protoc_insertion_point(field_add:histos.hist_collection.histos_1D)
  return _internal_add_histos_1d();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::histos::histo_1D >&
hist_collection::histos_1d() const {
  // @@protoc_insertion_point(field_list:histos.hist_collection.histos_1D)
  return histos_1d_;
}

// repeated .histos.histo_2D histos_2D = 2;
inline int hist_collection::_internal_histos_2d_size() const {
  return histos_2d_.size();
}
inline int hist_collection::histos_2d_size() const {
  return _internal_histos_2d_size();
}
inline void hist_collection::clear_histos_2d() {
  histos_2d_.Clear();
}
inline ::histos::histo_2D* hist_collection::mutable_histos_2d(int index) {
  // @@protoc_insertion_point(field_mutable:histos.hist_collection.histos_2D)
  return histos_2d_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::histos::histo_2D >*
hist_collection::mutable_histos_2d() {
  // @@protoc_insertion_point(field_mutable_list:histos.hist_collection.histos_2D)
  return &histos_2d_;
}
inline const ::histos::histo_2D& hist_collection::_internal_histos_2d(int index) const {
  return histos_2d_.Get(index);
}
inline const ::histos::histo_2D& hist_collection::histos_2d(int index) const {
  // @@protoc_insertion_point(field_get:histos.hist_collection.histos_2D)
  return _internal_histos_2d(index);
}
inline ::histos::histo_2D* hist_collection::_internal_add_histos_2d() {
  return histos_2d_.Add();
}
inline ::histos::histo_2D* hist_collection::add_histos_2d() {
  // @@protoc_insertion_point(field_add:histos.hist_collection.histos_2D)
  return _internal_add_histos_2d();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::histos::histo_2D >&
hist_collection::histos_2d() const {
  // @@protoc_insertion_point(field_list:histos.hist_collection.histos_2D)
  return histos_2d_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace histos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_histos_2eproto
